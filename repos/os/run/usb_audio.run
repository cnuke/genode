set use_qemu [have_include "power_on/qemu"]

#
# Build
#

set build_components {
	core init timer
	drivers/usb_host
	drivers/audio/usb
	server/report_rom
	app/top
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

set config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="TRACE"/>
	</parent-provides>

	<affinity-space width="2" height="1"/>

	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>}

append_platform_drv_config

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

<!--
	<start name="top">
		<resource name="RAM" quantum="2M"/>
		<affinity xpos="1" width="1"/>
		<config period_ms="1000"/>
		<route>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>
-->

	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="no">
			<policy rom="usb_audio_drv -> usb-devices" report="usb_drv -> devices"/>
			<default-policy report="usb_drv -> devices"/>
		</config>
	</start>
	<start name="usb_drv" caps="120"> }
append config "<binary name=\"[usb_host_drv_binary]\"/>"
append config {
		<resource name="RAM" quantum="12M"/>
		<provides> <service name="Usb"/> </provides>
		<config bios_handoff="no">
			<report devices="yes"/>}
append_if [expr !$use_qemu] config  {
			<!--
				The order is important because only the first policy is
				picked up - an entry may be moved to the front to test the
				corresponding device.
			 -->
			<!-- Fintel -->
			<!--<default-policy vendor_id="0x8086" product_id="0x0808"/>-->
			<!-- NewBee HS -->
			<default-policy vendor_id="0x0d8c" product_id="0x0014"/>
}
append_if $use_qemu config {
			<default-policy bus="0x001" dev="0x002"/> }
append config {
		</config>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="usb_audio_drv">
		<resource name="RAM" quantum="16M"/>
		<provides> <service name="Audio_out"/> </provides>
		<config report="no"/>
		<route>
			<service name="Usb"> <child name="usb_drv"/> </service>
			<service name="ROM" label="usb-devices"> <child name="report_rom"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
</config>}

install_config $config

#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer ld.lib.so report_rom usb_audio_drv top
	samples.raw
}

append boot_modules [usb_host_drv_binary]

append_platform_drv_boot_modules

build_boot_image $boot_modules

#
# Qemu opts for xHCI
#
append qemu_args "  -nographic "
append qemu_args " -device nec-usb-xhci,id=xhci "
append qemu_args " -device usb-host,bus=xhci.0,vendorid=0x0d8c,productid=0x0014 "

#run_genode_until {.*child "usb_audio_drv" exited with exit value 0.*} 100
run_genode_until forever
