diff --git a/src/VBox/Devices/Bus/DevPCI.cpp b/src/VBox/Devices/Bus/DevPCI.cpp
index 35061d5..5545edc 100644
--- a/src/VBox/Devices/Bus/DevPCI.cpp
+++ b/src/VBox/Devices/Bus/DevPCI.cpp
@@ -276,6 +276,7 @@ static void pci_update_mappings(PCIDevice *d)
                 if (cmd & PCI_COMMAND_MEMORY) {
                     new_addr = RT_LE2H_U32(*(uint32_t *)(d->config +
                                                          config_ofs));
+				// RTLogPrintf("%s:%d: new_addr: 0x%x\n", __func__, __LINE__, new_addr);
                     /* the ROM slot has a specific enable bit */
                     if (i == PCI_ROM_SLOT && !(new_addr & 1))
                         goto no_mem_map;
@@ -306,6 +307,7 @@ static void pci_update_mappings(PCIDevice *d)
                             int rc = PDMDevHlpIOPortDeregister(d->pDevIns, r->addr + 2, 1);
                             AssertRC(rc);
                         } else {
+							RTLogPrintf("r->addr: 0x%x r->size: %zu\n", r->addr, r->size);
                             int rc = PDMDevHlpIOPortDeregister(d->pDevIns, r->addr, r->size);
                             AssertRC(rc);
                         }
@@ -324,6 +326,14 @@ static void pci_update_mappings(PCIDevice *d)
                         AssertMsgRC(rc, ("rc=%Rrc d=%s i=%d GCPhysBase=%RGp size=%#x\n", rc, d->name, i, GCPhysBase, r->size));
                     }
                 }
+				// RTLogPrintf("%s:%d: new_addr: 0x%x\n", __func__, __LINE__, new_addr);
+				// if (new_addr == 0xe0000000) {
+				// 	RTLogPrintf("%s:%d FSCKING OVERRIDE TEH SH*T with: 0xf0000000\n", __func__, __LINE__);
+				// 	new_addr = 0xf0000000;
+				// } //else if (new_addr == 0xe4000000) {
+				// 	RTLogPrintf("%s:%d FSCKING OVERRIDE TEH SH*T with: 0xe0000000\n", __func__, __LINE__);
+				// 	new_addr = 0xe0000000;
+				// }
                 r->addr = new_addr;
                 if (r->addr != ~0U) {
                     int rc = r->map_func(d, i,
@@ -1739,8 +1749,8 @@ static int pciR3RegisterDeviceInternal(PPCIBUS pBus, int iDev, PPCIDEVICE pPciDe
         pBus->cBridges++;
     }
 
-    Log(("PCI: Registered device %d function %d (%#x) '%s'.\n",
-         iDev >> 3, iDev & 7, 0x80000000 | (iDev << 8), pszName));
+    RTLogPrintf("PCI: Registered device %d function %d (%#x) '%s'.\n",
+         iDev >> 3, iDev & 7, 0x80000000 | (iDev << 8), pszName);
 
     return VINF_SUCCESS;
 }
@@ -1850,7 +1860,7 @@ static DECLCALLBACK(int) pciR3FakePCIBIOS(PPDMDEVINS pDevIns)
      * Set the start addresses.
      */
     pGlobals->pci_bios_io_addr  = 0xd000;
-    pGlobals->pci_bios_mem_addr = UINT32_C(0xf0000000);
+    pGlobals->pci_bios_mem_addr = UINT32_C(0xe0000000);
     pGlobals->uBus = 0;
 
     /*
@@ -2090,6 +2100,16 @@ static DECLCALLBACK(void) pciR3Reset(PPDMDEVINS pDevIns)
 }
 
 
+PPDMDEVINS _pDevIns;
+
+
+void lpc_set_device_id(uint16_t id)
+{
+    PPCIGLOBALS pGlobals = PDMINS_2_DATA(_pDevIns, PPCIGLOBALS);
+    PCIDevSetDeviceId(&pGlobals->PIIX3State.dev, id);
+}
+
+
 /**
  * @interface_method_impl{PDMDEVREG,pfnConstruct}
  */
@@ -2098,6 +2118,8 @@ static DECLCALLBACK(int)   pciR3Construct(PPDMDEVINS pDevIns, int iInstance, PCF
     Assert(iInstance == 0);
     PDMDEV_CHECK_VERSIONS_RETURN(pDevIns);
 
+    _pDevIns = pDevIns;
+
     /*
      * Validate and read configuration.
      */
@@ -2184,6 +2206,18 @@ static DECLCALLBACK(int)   pciR3Construct(PPDMDEVINS pDevIns, int iInstance, PCF
     PCIDevSetClassBase( &pBus->PciDev,   0x06); /* PCI_bridge */
     PCIDevSetHeaderType(&pBus->PciDev,   0x00);
 
+	/* override w/ x250 settings */
+    PCIDevSetDeviceId(         &pBus->PciDev, 0x2226);
+    PCIDevSetRevisionId(       &pBus->PciDev,   0x03);
+    PCIDevSetSubSystemVendorId(&pBus->PciDev, 0x17aa);
+    PCIDevSetSubSystemId(      &pBus->PciDev, 0x2226);
+
+	/* override w/ shuttle settings */
+    // PCIDevSetDeviceId(         &pBus->PciDev, 0x1604);
+    // PCIDevSetRevisionId(       &pBus->PciDev,   0x08);
+    // PCIDevSetSubSystemVendorId(&pBus->PciDev, 0x1297);
+    // PCIDevSetSubSystemId(      &pBus->PciDev, 0x4028);
+
     pBus->PciDev.pDevIns              = pDevIns;
     pciDevSetRequestedDevfunc(&pBus->PciDev);
     pciR3RegisterDeviceInternal(pBus, 0, &pBus->PciDev, "i440FX");
@@ -2195,9 +2229,22 @@ static DECLCALLBACK(int)   pciR3Construct(PPDMDEVINS pDevIns, int iInstance, PCF
     PCIDevSetClassBase( &pGlobals->PIIX3State.dev,   0x06); /* PCI_bridge */
     PCIDevSetHeaderType(&pGlobals->PIIX3State.dev,   0x80); /* PCI_multifunction, generic */
 
+	/* override w/ x250 settings */
+    PCIDevSetDeviceId(         &pGlobals->PIIX3State.dev, 0x9cc3);
+    PCIDevSetRevisionId(       &pGlobals->PIIX3State.dev,   0x03); /* rev id */
+    PCIDevSetSubSystemVendorId(&pGlobals->PIIX3State.dev, 0x17aa);
+    PCIDevSetSubSystemId      (&pGlobals->PIIX3State.dev, 0x2226);
+
+	/* override w/ shuttle settings */
+    // PCIDevSetDeviceId(         &pGlobals->PIIX3State.dev, 0x9cc5);
+    // PCIDevSetRevisionId(       &pGlobals->PIIX3State.dev,   0x03); /* rev id */
+    // PCIDevSetSubSystemVendorId(&pGlobals->PIIX3State.dev, 0x1297);
+    // PCIDevSetSubSystemId      (&pGlobals->PIIX3State.dev, 0x4028);
+
     pGlobals->PIIX3State.dev.pDevIns      = pDevIns;
     pciDevSetRequestedDevfunc(&pGlobals->PIIX3State.dev);
-    pciR3RegisterDeviceInternal(pBus, 8, &pGlobals->PIIX3State.dev, "PIIX3");
+    /* register as lpc at 00:1f.00 */
+    pciR3RegisterDeviceInternal(pBus, 0xf8 /* 0x1f << 3 */ , &pGlobals->PIIX3State.dev, "lpc");
     pciR3Piix3Reset(&pGlobals->PIIX3State);
 
     pBus->iDevSearch = 16;
diff --git a/src/VBox/Devices/Graphics/DevVGA.cpp b/src/VBox/Devices/Graphics/DevVGA.cpp
index 5b3b9b3..9e71c7e 100644
--- a/src/VBox/Devices/Graphics/DevVGA.cpp
+++ b/src/VBox/Devices/Graphics/DevVGA.cpp
@@ -6768,7 +6768,7 @@ const PDMDEVREG g_DeviceVga =
     /* u32Version */
     PDM_DEVREG_VERSION,
     /* szName */
-    "vga",
+    "vgao-orig",
     /* szRCMod */
     "VBoxDDGC.gc",
     /* szR0Mod */
diff --git a/src/VBox/Devices/PC/DevACPI.cpp b/src/VBox/Devices/PC/DevACPI.cpp
index d2a3add..4ef3d23 100644
--- a/src/VBox/Devices/PC/DevACPI.cpp
+++ b/src/VBox/Devices/PC/DevACPI.cpp
@@ -3257,7 +3257,7 @@ static DECLCALLBACK(int) acpiR3Construct(PPDMDEVINS pDevIns, int iInstance, PCFG
             return rc; \
     } while (0)
     R(SMI_CMD,        1, acpiR3SmiWrite,          NULL,                "ACPI SMI");
-#ifdef DEBUG_ACPI
+#if 0
     R(DEBUG_HEX,      1, acpiR3DhexWrite,         NULL,                "ACPI Debug hex");
     R(DEBUG_CHR,      1, acpiR3DchrWrite,         NULL,                "ACPI Debug char");
 #endif
diff --git a/src/VBox/Devices/build/VBoxDD.h b/src/VBox/Devices/build/VBoxDD.h
index 5ad085d..8e3dcb9 100644
--- a/src/VBox/Devices/build/VBoxDD.h
+++ b/src/VBox/Devices/build/VBoxDD.h
@@ -41,6 +41,7 @@ extern const PDMDEVREG g_DeviceMC146818;
 extern const PDMDEVREG g_DevicePIIX3IDE;
 extern const PDMDEVREG g_DeviceFloppyController;
 extern const PDMDEVREG g_DeviceVga;
+extern const PDMDEVREG g_DeviceGPU;
 extern const PDMDEVREG g_DeviceVMMDev;
 extern const PDMDEVREG g_DevicePCNet;
 #ifdef VBOX_WITH_E1000
diff --git a/src/VBox/Main/src-client/BusAssignmentManager.cpp b/src/VBox/Main/src-client/BusAssignmentManager.cpp
index 3b6adb3..18c7df0 100644
--- a/src/VBox/Main/src-client/BusAssignmentManager.cpp
+++ b/src/VBox/Main/src-client/BusAssignmentManager.cpp
@@ -56,6 +56,8 @@ static const DeviceAssignmentRule aGenericRules[] =
     /* VGA controller */
     {"vga",           0,  2, 0,  0},
 
+    {"gpu-pass-through", 0, 2,  0, 0},
+
     /* VMM device */
     {"VMMDev",        0,  4, 0,  0},
 
diff --git a/src/VBox/Main/src-client/ConsoleImpl2.cpp b/src/VBox/Main/src-client/ConsoleImpl2.cpp
index f69837a..dd55c56 100644
--- a/src/VBox/Main/src-client/ConsoleImpl2.cpp
+++ b/src/VBox/Main/src-client/ConsoleImpl2.cpp
@@ -1517,25 +1517,36 @@ int Console::configConstructorInner(PUVM pUVM, PVM pVM, AutoWriteLock *pAlock)
         /*
          * VGA.
          */
-        GraphicsControllerType_T graphicsController;
-        hrc = pMachine->COMGETTER(GraphicsControllerType)(&graphicsController);             H();
-        switch (graphicsController)
-        {
-            case GraphicsControllerType_Null:
-                break;
-            case GraphicsControllerType_VBoxVGA:
-#ifdef VBOX_WITH_VMSVGA
-            case GraphicsControllerType_VMSVGA:
-#endif
-                rc = configGraphicsController(pDevices, graphicsController, pBusMgr, pMachine, biosSettings,
-                                              RT_BOOL(fHMEnabled));
-                if (FAILED(rc))
-                    return rc;
-                break;
-            default:
-                AssertMsgFailed(("Invalid graphicsController=%d\n", graphicsController));
-                return VMR3SetError(pUVM, VERR_INVALID_PARAMETER, RT_SRC_POS,
-                                    N_("Invalid graphics controller type '%d'"), graphicsController);
+        // GraphicsControllerType_T graphicsController;
+        // hrc = pMachine->COMGETTER(GraphicsControllerType)(&graphicsController);             H();
+        // switch (graphicsController)
+        // {
+        //     case GraphicsControllerType_Null:
+        //         break;
+        //     case GraphicsControllerType_VBoxVGA:
+// #ifdef VBOX_WITH_VMSVGA
+        //     case GraphicsControllerType_VMSVGA:
+// #endif
+        //         rc = configGraphicsController(pDevices, graphicsController, pBusMgr, pMachine, biosSettings,
+        //                                       RT_BOOL(fHMEnabled));
+        //         if (FAILED(rc))
+        //             return rc;
+        //         break;
+        //     default:
+        //         AssertMsgFailed(("Invalid graphicsController=%d\n", graphicsController));
+        //         return VMR3SetError(pUVM, VERR_INVALID_PARAMETER, RT_SRC_POS,
+        //                             N_("Invalid graphics controller type '%d'"), graphicsController);
+        // }
+
+        if (1) {
+            InsertConfigNode(pDevices, "vga", &pDev);
+            InsertConfigNode(pDev,     "0",        &pInst);
+            InsertConfigNode(pInst,    "Config",   &pCfg);
+            InsertConfigInteger(pInst, "Trusted",  1);
+            hrc = pBusMgr->assignPCIDevice("vga", pInst);                  H();
+
+			CFGMR3RemoveValue(pRoot, "RamPreAlloc");
+			InsertConfigInteger(pRoot, "RamPreAlloc", 1);
         }
 
         /*
