

              ===============================================
              Release notes for the Genode OS Framework 19.11
              ===============================================

                               Genode Labs



; intro
; @nfeske


Preliminary block-device encryptor
##################################

; @cnuke, @m-stein


Virtualization of 64-bit ARM platforms
######################################

Genode has a long history regarding support of all kind of virtualization
techniques. Mainly, because an evolving operating system needs interim solutions
to provide non-trivial, existent software stacks. Recently in release 19.05 the
introduction of a Kernel-agnostic interface to control Virtual-Machines (VM)
ushered in a new level for the construction resp. porting of
Virtual-Machine-Monitors (VMM).
By introducing a new ARMv8 compliant VMM developed from scratch, we continue
this line of work.

The new VMM continues the Proof-of-Concept (PoC) implementation for ARMv7 introduced
in Genode release 15.02. In contrast to the former PoC implementation it aims to
be complete to a greater extent. Currently, it comprises device models for:

* RAM
* System Bus
* CPU
* Generic Interrupt Controller v2 and v3
* Generic Timer
* PL011 UART (limited)
* Pass-through devices

The VMM is ready to load diverse 64-bit Linux kernels including
Device-Tree-Binary (DTB) and Initramfs. Currently, the implementation uses a
fixed memory layout for the guest-physical memory view, which needs to be
reflected by the DTB used for the guest OS. An example device tree source file
can be found in 'repos/os/src/server/vmm/spec/arm_v8/virt.dts'. The whole VMM
implementation can be found in the same directory.

Although, support for many-core VMs is already constructed internally, it is not
ready to work free of complaints. Further outstanding features that are already
in development are Virtio device model support for networking and console.

The first and by now only backend we tied to the ARMv8 broadened Kernel-agnostic
VM-session interface is Genode's own base-hw kernel.

To give the new VMM a try, you can execute the 'repos/os/run/vmm_arm.run' on top
of the i.MX8 Evaluation Kit board.

The VMM hardly depends on the availability of the virtualization hardware
support (EL2). This hardware support comprises extensions for the ARMv8-A CPU,
ARM's Generic Timer, and ARM's GIC. Therefore, the Raspberry Pi 3
board cannot be used as basis, because it does not include a GIC, but an own
interrupt-controller without hardware-assisted virtualization of interrupts.

Within the scope of this work, we consolidated the generic VM session interface
slightly. The RPC call to create a new virtual-CPU now returns an identifier for
identification.


New tooling for bridging existing build systems with Genode
###########################################################

; @nfeske


Base framework and OS-level infrastructure
##########################################

File-system session
===================

The file-system session interface received a much anticipated update.

Writing modification times
--------------------------

The new operation WRITE_TIMESTAMP allows a client to update the modification
time of a file-system node. The time is defined by the client to keep
file-system servers free from time-related concerns. The VFS server implements
the operation by forwarding it to the VFS plugin interface. At present, this
new interface is implemented by the rump VFS plugin to store modification
times on ext file systems.


Enhanced file-status info
-------------------------

The status of a file-system node as returned by the 'File_system::Status'
operation has been revisited. First, we replaced the fairly opaque "mode" bits
- which was an ad-hoc attempt to stay compatible with Unix - with the explicit
notion of 'readable', 'writeable', and 'executable' attributes. We completely
dropped the notion of users and groups. Second, we added the distinction
between *continuous* and *transactional* files to allow for the robust
implementation of continuous write operations across component boundaries. A
continuous file can be written to via a sequence of arbitrarily sized chunks
of data. For such files, a client can split a large write operation into any
number of smaller operations in accordance to the size of I/O buffers. In
contrast, a write to a transactional file is regarded as a distinct operation.
The canonical example of a transactional file is a socket-control pseudo file.


Virtual file-system infrastructure
==================================

First fragments of a front-end API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The VFS is mostly used indirectly via the C runtime. However, it is also
useful for a few components that use the Genode API directly without any
libc. To accommodate such users of the VFS, we introduced the front-end
API at _os/vfs.h_ that covers a variety of current use cases. Currently, those
use cases revolve around the watching, reading, and parsing of files and
file-system structures - as performed by Sculpt's deployment mechanism.
Writing to files is not covered.


Improved file-watching support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All pseudo files that use the VFS-internal 'Readonly_value_file_system'
utility have become able to deliver watch notifications. This change enables
VFS clients to respond to VFS-plugin events (think of terminal resize)
dynamically.

Speaking of the *terminal VFS plugin*, the current release enhances the plugin
in several respects. First, it now delivers status information such as the
terminal size via pseudo files. Second, we equipped the VFS terminal file
system with the ability to detect user interrupts in the incoming data stream,
and propagate this information via the new pseudo file '.terminal/interrupts'.
Each time, the user presses control-c in the terminal, the value stored in
this pseudo file is increased. Thereby, a VFS client can watch this file to
get notified about the occurrences of user interrupts.


VFS plugin for emulating POSIX pipes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We added a new VFS plugin for emulating POSIX pipes. The new plugin creates
pipes between pairs of VFS handles. It replaces the deprecated libc_pipe
plugin. In contrast to the libc_pipe plugin, which was limited to pipes within
one component, the new VFS plugin can also be used to establish pipes between
different components by using the plugin at a shared VFS server.


Reworked C runtime, improved POSIX compatibility
================================================

; @nfeske

commit 0aedabd245171da51640720348b369b463bf6178
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Mon Sep 16 13:52:39 2019 +0200

    libc: remove global constructors
    
    - readv_writev: move 'rw_lock' instance into a function scope,
      constructing the instance on the first access.
    - select: move 'select_cb_list' instance into function scope.
    - thread: move 'key_list_lock' and 'keys' into function scope.
    - rwlock, semaphore, socket_fs_plugin, thread, thread_create:
      instantiate 'Libc::Allocator' per use, alleviating the need for a
      global instance.
    
    Issue #3496

commit bf922326981b5f5ac26f9dc01fd13dbb3497cc41
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Sep 18 20:19:10 2019 +0200

    libc: split task.cc into multiple files
    
    This patch is the first step of re-organizing the internal structure of
    the libc. The original version involved many direct calls of global
    functions (often with side effects) across compilation units, which
    made the control flow (e.g., the initialization sequence) hard to
    follow.
    
    The new version replaces those ad-hoc interactions with dedicated
    interfaces (like suspend.h, resume.h, select.h, current_time.h). The
    underlying facilities are provided by the central Libc::Kernel and
    selectively propagated to the various compilation units. The latter is
    done by a sequence of 'init_*' calls, which eventually will be replaced
    by constructor calls.
    
    The addition of new headers increases the chance for name clashes with
    existing (public) headers. To disambiguate libc-internal header files
    from public headers, this patch moves the former into a new 'internal/'
    subdirectory. This makes the include directives easier to follow and the
    libc's source-tree structure more tidy.
    
    There are still a few legacies left, which cannot easily be removed
    right now (e.g., because noux relies on them). However, the patch moves
    those bad apples to legacy.h and legacy.cc, which highlights the
    deprecation of those functions.
    
    Issue #3497

commit 648bcd1505a93ac799c572f1773f32fe409296d3
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Sep 19 20:37:17 2019 +0200

    libc: unify use of namespaces
    
    This patch unifies the patterns of using the 'Genode' and 'Libc'
    namespaces.
    
    Types defined in the 'internal/' headers reside in the 'Libc'
    namespace. The code in the headers does not need to use the
    'Libc::' prefix.
    
    Compilation units import the 'Libc' namespace after the definition of
    local types. Local types reside in the 'Libc' namespace (and should
    eventually move to an 'internal/' header).
    
    Since the 'Libc' namespace imports the 'Genode' namespace, there is
    no need to use the 'Genode::' prefix. Consequently, code in the
    compilation units rarely need to qualify the 'Genode' or 'Libc'
    namespaces.
    
    There are a few cases where the 'Libc', the 'Genode', and the global
    (libc) namespaces are ambigious. In these cases, an explicit
    clarification is needed:
    
    - 'Genode::Allocator' differs from 'Libc::Allocator'.
    - 'Genode::Env' differs from 'Libc::Env'.
    - Genode's string functions (strcmp, memcpy, strcpy) conflict
      with the names of the (global) libc functions.
    - There exist both 'Genode::uint64_t' and the libc'c 'uint64_t'.
    
    Issue #3497

commit ab5187d6731b2d3578b3480b28d3236983660304
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Mon Sep 23 14:45:58 2019 +0200

    libc: resolve symlinks in execve
    
    This patch complements the commit "libc: execve" with the ability to
    execute files stored at arbitrary sub directories of the file system.
    
    Issue #3481
    Issue #3500

commit d0bf6d2b52f9fe2c3452554e1e8f672038451b9e
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Wed Mar 20 15:16:07 2019 +0100

    libc: add modification time
    
    Issue #1784.

commit 979d823d853240c496c4c2c9df9c709a1c34db1e
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Sep 27 17:30:04 2019 +0200

    libc: make mtime update configurable
    
    By specifying <libc update_mtime="no"...>, the modification-time update
    on VFS-sync operations (as issued whenever a written file is closed)
    can explicitly be disabled.
    
    Issue #1784

commit 7ac32ea60c703a73477c121ab8269dfad201f428
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Oct 9 15:51:18 2019 +0200

    libc: support for ioctls via ioctl directory
    
    This patch introduces a new scheme of handling ioctl operations that
    maps ioctls to pseudo-file accesses, similar to how the libc maps socket
    calls to socket-fs operations.
    
    A device file can be accompanied with a (hidden) directory that is named
    after the device file and hosts pseudo files for triggering the various
    device operations. For example, for accessing a terminal, the directory
    structure looks like this:
    
      /dev/terminal
      /dev/.terminal/info
    
    The 'info' file contains device information in XML format. The type of
    the XML node corresponds to the device type. E.g., If the libc receives
    a 'TIOCGWINSZ' ioctl for /dev/terminal, it reads the content of
    /dev/.terminal/info to obtain the terminal-size information. In this
    case, the 'info' file looks as follows:
    
      <terminal rows="25" columns="80/>
    
    Following this scheme, VFS plugins can support ioctl operations by
    providing an ioctl directory in addition to the actual device file.
    
    Internally, the mechanism uses the 'os/vfs.h' API to access pseudo
    files. Hence, we need to propagate the Vfs::Env to 'vfs_plugin.cc' to
    create an instance of a 'Directory' for the root for the VFS.
    
    Issue #3519

commit d516515c7a2840f265cdcc916038bc5020b3dc6e
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Thu Oct 10 14:34:40 2019 +0200

    vfs/terminal: provide meta info as pseudo files
    
    Issue #3519
    Fixes #3521

commit 7b0771659e2193b57f1c4cf77ef8bd810887cc7b
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Fri Oct 11 15:23:22 2019 +0200

    libc: trigger SIGWINCH by watching .terminal/info
    
    Issue #3544

commit 636e0f64447ab43372fddba5f27b77d8f93d03b0
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Oct 29 10:52:49 2019 +0100

    libc: cancel select when POSIX signal occurs
    
    With this patch, Vim running via the 'bash.run' script becomes able to
    adopt itself to changed window dimensions.
    
    Issue #3544

commit 8c44b17e862e55e0a70c0c538ffc60e64369a2e6
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Tue Oct 29 18:11:09 2019 +0100

    libc: shebang handling for execve
    
    Fixes #3545

commit c1012e6a45115c3422c71c6b109400fd7dc89c19
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Oct 30 21:19:11 2019 +0100

    libc: translate terminal user interrupts to SIGINT
    
    Issue #3546

commit bb6eb0f6ea072e12cdfe73883b695a2158bc3061
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Oct 30 22:19:54 2019 +0100

    libc: local signal delivery via 'kill'
    
    This patch adds the ability to call 'kill' with the own PID to trigger
    the execution of the handler of the specified POSIX signal. This is used
    by 'bash', e.g., when cancelling the input of a command via control-c.
    
    Related to issue #3546

commit 068324536cd4855295c12246e7ab0a5cc49b8383
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Oct 30 23:04:34 2019 +0100

    libc: eliminate atexit handler for 'Rtc'
    
    We never want to destruct the 'Rtc' because other atexit handlers may
    depend on it (e.g., for updating modification times when closing files).

commit 91412c6c52f28fdb64ac7db33696a6435966c5e4
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Wed Oct 30 23:08:34 2019 +0100

    libc: trigger SIGCHLD for when forked child exits

commit fab2fc874f178f7b354efb9ea57fd32941745cab
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Sat Nov 2 18:54:56 2019 +0100

    libc: write loop for continuous files
    
    This patch improves the libc's write operation to iterate on partial
    writes to continuous files until the original write count is reached.
    The split of large write operations into small partial writes as
    dictated by the VFS infrastructure (e.g., constained by I/O buffer
    sizes) becomes invisible to the libc-using application.
    
    Issue #3507
    Issue #2303

commit d4e0d2f578932a7c0a0c71bcddbba0b5501fa7ff
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Sun Nov 3 11:53:13 2019 +0100

    libc: defer clone ack after FD initialization
    
    Issue #3478
    Issue #2303

commit c50252fb350bd43d7a0fbdf6182a43c0877e370e
Author: Christian Helmuth <christian.helmuth@genode-labs.com>
Date:   Tue Nov 5 12:32:55 2019 +0100

    libc: suspend/resume in pthread mutex lock/unlock
    
    Issue #3550

commit 6ccd65bd8e720336ab242445dfc6eb701659c6d8
Author: Norman Feske <norman.feske@genode-labs.com>
Date:   Mon Nov 18 15:28:37 2019 +0100

    sculpt_manager: invoke mkfs.ext2 with -F
    
    The block-vfs plugin is no longer a special file. So we have to
    explicitly discharge the sanity check of the mkfs tool.
    
    Issue #3507


Input-event handling
====================

; @chelmuth

commit edc954522994146f49e56a0a2183acafa6ca3b4d
Author: Christian Helmuth <christian.helmuth@genode-labs.com>
Date:   Tue Sep 10 16:47:24 2019 +0200

    input: move control-modifier handling into clients
    
    Moving the handling into the input-session clients enables more
    sophisticated implementations (like Qt5) to apply key-symbol based
    handling of those modifiers like correct CTRL-A with QWERTY and AZERTY
    layouts and distinction of CTRL-J and Return.
    
    Issue #3483

commit cccfd0719d9feee49f3f6e7966fa0a824c864172
Author: Christian Helmuth <christian.helmuth@genode-labs.com>
Date:   Tue Sep 10 14:51:51 2019 +0200

    qt5: prevent deprecated warnings
    
    Issue #3483

commit 1782c6be79ca929442fd0fe526ce767e238607b7
Author: Christian Helmuth <christian.helmuth@genode-labs.com>
Date:   Tue Sep 3 15:25:34 2019 +0200

    qt5: rework keyboard handling
    
    Fixes #3483


NIC router
==========

; @m-stein

commit 27c2a66bbde5a3a65349b8a5d472bc61179e79a5
Author: Martin Stein <martin.stein@genode-labs.com>
Date:   Tue Oct 15 18:56:37 2019 +0200

    nic_router: report link state
    
    This adds two new boolean attributes to the <report> tag of the NIC router
    configuration 'link_state' and 'link_state_triggers'. The former decides
    whether to report the link state of each NIC interface (downlink, uplinks) at
    the NIC router. The other decides whether to trigger reporting each time the
    link state of an interface changes.
    
    Fixes #3527


Device drivers
==============

Platform driver on x86
~~~~~~~~~~~~~~~~~~~~~~

; @chelmuth

commit 6df8b446165d8ea01defe29886c28a994f5e2b65
Author: Christian Helmuth <christian.helmuth@genode-labs.com>
Date:   Mon Sep 23 15:29:05 2019 +0200

    platform/x86: support 64-bit base address registers
    
    The API still exports 32-bit address and size values only, which works
    as the actual MMIO resources are allocated in platform_drv internally.
    
    Fixes #3494


Wireless driver
~~~~~~~~~~~~~~~

; @cnuke

commit c5706e8f4a9f4e5cd3960eac6f659895147fc9b3
Author: Josef Söntgen <josef.soentgen@genode-labs.com>
Date:   Mon Sep 23 17:24:34 2019 +0200

    wifi_drv: enable loading of 5000 series FW
    
    Fixes #3502.

commit 25aa25c6a07770f95d33bb125ec37dd16b8e1d18
Author: Josef Söntgen <jws@sysret.de>
Date:   Wed Nov 20 10:50:56 2019 +0100

    wifi_drv: enable loading of 9000 series FW
    
    Tested with a 'Intel(R) Wireless-AC 9462' device.
    
    Fixes #3556.


Libraries and applications
##########################

VirtualBox improvements
=======================

The GUI handling of our Virtualbox port got improved to react on
window size changes more instantly. The effect is that an interactive
adjustment of the window size, e.g. on Sculpt, becomes quickly visible to the
user. Still, the VM may take some time to adjust to the resolution change,
which depends on having installed guest addition drivers and the time the
guest driver decides to react on the resolution change finally.

Updated 3rd-party software
==========================

With the addition of the 64-bit ARM architecture (aarch64) with the Genode 19.05
release it became necessary to update libraries the Genode tool chain (gcc)
depends on in order to support aarch64 properly. This concerns the GNU multi
precision arithmetic library (gmp) which has been updated from version 4.3.2 to
6.1.2, as well as the libraries that depend on it: Multi precision floating
point (mpfr) and multi precision complex arithmetic (mpc). All those old
versions did not offer support for the aarch64 architecture which is a
requirement to make Genode self hosting. Targets for building binutils and gcc
within Genode for aarch64 are in place, GNU make is in place, and even code
coverage (gcov) has been added. This work puts aarch64 in line with other Genode
supported CPU architectures and emphasizes our interest in the ARM 64-bit
architecture.

Platforms
#########

Execution on bare hardware (base-hw)
====================================

With the last release 19.08 Genode's base-hw kernel got extended to support the
ARMv8-A architecture in principle. The first hardware supported was the
Raspberry Pi 3 as well as the i.MX8 evaluation kit (EVK). But only a single
CPU-core was useable at that time. Now, this limitation gets resolved. On both
boards all four CPU-cores are available henceforth.


Removed components
##################

The current release removes the following components:

:gems/src/app/launcher:

  The graphical launcher remained unused for a few years now. It is not
  suitable for systems as flexible as Sculpt OS.

:os/src/app/cli_monitor:

  CLI monitor was a runtime environment with a custom command-line interface
  to start and stop subsystems. It was part of the user interface of our
  first take on a Genode-based desktop OS called
  [https://genode.org/documentation/release-notes/15.11#Genode_as_desktop_OS - Turmvilla].

  Nowadays, we use standard command-line tools like Vim to edit init
  configurations dynamically, which alleviates the need for a custom CLI.
  The CLI-monitor component was too limited for use cases like Sculpt
  anyway.

  Along with the CLI monitor, we removed the ancient (and untested for long
  time) _terminal_mux.run_ script, which was the only remaining user of the CLI
  monitor.

:fatfs_fs, rump_fs, and libc_fatfs plugin:

  The stand-alone file-system servers fatfs_fs and rump_fs as well as the
  fatfs libc plugin have been superseded by the fatfs and rump VFS plugins.
  The stand-alone servers can be replaced by using the VFS server plus the
  corresponding VFS plugin as a drop-in replacement.
